// Queue (its operations) using linked lists
--------------------------------------------

#include <stdio.h>
#include <stdlib.h>
struct Node {
 int data;
 struct Node* next;
};
struct Node* front = NULL;
struct Node* rear = NULL;
int isEmpty() {
 return (front == NULL);
}
void enqueue(int value) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 if (newNode == NULL) {
 printf("Memory allocation failed\n");
 exit(EXIT_FAILURE);
 }
 newNode->data = value;
 newNode->next = NULL;
 if (isEmpty()) {
 front = rear = newNode;
 } else {
 rear->next = newNode;
 rear = newNode;
 }
}
int dequeue() {
 if (isEmpty()) {
 printf("Queue Underflow\n");
 exit(EXIT_FAILURE);
 }
 struct Node* temp = front;
 int removedItem = temp->data;
 front = temp->next;
 free(temp);
 if (front == NULL) {
 rear = NULL;
 }
 return removedItem;
}
void display() {
 if (isEmpty()) {
 printf("Queue is empty\n");
 } else {
 struct Node* current = front;
 printf("Queue elements: ");
 while (current != NULL) {
 printf("%d ", current->data);
 current = current->next;
 }
 printf("\n");
 }
}
int main() {
 int choice, value;
 do {
 printf("1. Enqueue\n");
 printf("2. Dequeue\n");
 printf("3. Display\n");
 printf("4. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 printf("Enter the value to enqueue: ");
 scanf("%d", &value);
 enqueue(value);
 break;
 case 2:
 if (!isEmpty()) {
 printf("Dequeued element: %d\n", dequeue());
 }
 break;
 case 3:
 display();
 break;
 case 4:
 printf("Exiting...\n");
 break;
 default:
 printf("Invalid choice. Please enter a valid option.\n");
 }
 } while (choice != 4);
 return 0;
}