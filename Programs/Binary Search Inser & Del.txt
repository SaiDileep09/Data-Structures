// Binary Search trees- Insertion and deletion
-----------------------------------------------

#include <stdio.h>
#include <stdlib.h>
struct Node {
 int data;
 struct Node* left;
 struct Node* right;
};
struct Node* createNode(int value) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = value;
 newNode->left = NULL;
 newNode->right = NULL;
 return newNode;
}
struct Node* insert(struct Node* root, int value) {
 if (root == NULL) {
 return createNode(value);
 }
 if (value < root->data) {
 root->left = insert(root->left, value);
 } else if (value > root->data) {
 root->right = insert(root->right, value);
 }
 return root;
}
struct Node* minValueNode(struct Node* node) {
 struct Node* current = node;
 while (current->left != NULL) {
 current = current->left;
 }
 return current;
}
struct Node* deleteNode(struct Node* root, int value) {
 if (root == NULL) {
 return root;
 }
 if (value < root->data) {
 root->left = deleteNode(root->left, value);
 } else if (value > root->data) {
 root->right = deleteNode(root->right, value);
 } else {
 if (root->left == NULL) {
 struct Node* temp = root->right;
 free(root);
 return temp;
 } else if (root->right == NULL) {
 struct Node* temp = root->left;
 free(root);
 return temp;
 }
 struct Node* temp = minValueNode(root->right);
 root->data = temp->data;
 root->right = deleteNode(root->right, temp->data);
 }
 return root;
}
void inorderTraversal(struct Node* root) {
 if (root != NULL) {
 inorderTraversal(root->left);
 printf("%d ", root->data);
 inorderTraversal(root->right);
 }
}
int main() {
 struct Node* root = NULL;
 int choice, value;
 do {
 printf("1. Insert\n");
 printf("2. Delete\n");
 printf("3. Display (Inorder Traversal)\n");
 printf("4. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 printf("Enter the value to insert: ");
 scanf("%d", &value);
 root = insert(root, value);
 break;
 case 2:
 printf("Enter the value to delete: ");
 scanf("%d", &value);
 root = deleteNode(root, value);
 break;
 case 3:
 printf("Inorder Traversal: ");
 inorderTraversal(root);
 printf("\n");
 break;
 case 4:
 printf("Exiting...\n");
 break;
 default:
 printf("Invalid choice. Please enter a valid option.\n");
 }
 } while (choice != 4);
 return 0;
}